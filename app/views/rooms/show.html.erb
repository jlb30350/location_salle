<div class="room-details-section">
  <h2><%= @room.name %></h2>

  <!-- Menu déroulant pour choisir la durée -->
  <div class="form-group mt-4">
    <%= label_tag :duration, 'Choisissez la durée' %>
    <%= select_tag :duration, options_for_select([['1 heure', 'hour'], ['1 jour', 'day'], ['2 à 6 jours', 'multiple_days'], ['Week-end', 'weekend'], ['Semaine', 'week'], ['Mois', 'month'], ['Année', 'year']]), class: 'form-control', id: 'duration-select' %>
  </div>

  <!-- Navigation du calendrier -->
  <div class="calendar-navigation mb-3 mt-4">
    <%= link_to "Année précédente", availability_room_path(@room, year: @year.to_i - 1, month: @month), class: "btn btn-secondary" %>
    <%= link_to "Mois précédent", availability_room_path(@room, year: @month == 1 ? @year.to_i - 1 : @year, month: @month == 1 ? 12 : @month.to_i - 1), class: "btn btn-secondary" %>
    <%= link_to "Mois suivant", availability_room_path(@room, year: @month == 12 ? @year.to_i + 1 : @year, month: @month == 12 ? 1 : @month.to_i + 1), class: "btn btn-secondary" %>
    <%= link_to "Année suivante", availability_room_path(@room, year: @year.to_i + 1, month: @month), class: "btn btn-secondary" %>
  </div>

  <!-- Affichage du mois et de l'année -->
  <h3><%= Date::MONTHNAMES[@month.to_i] %> <%= @year %></h3>

  <!-- Affichage du calendrier sous forme de tableau -->
  <table class="table calendar-table">
    <thead>
      <tr>
        <% Date::ABBR_DAYNAMES.each do |day_name| %>
          <th><%= day_name %></th>
        <% end %>
      </tr>
    </thead>
    <tbody>
      <% start_day_of_week = Date.new(@year.to_i, @month.to_i, 1).wday %>
      <tr>
        <!-- Remplissage des cellules vides avant le premier jour du mois -->
        <% start_day_of_week.times do %>
          <td></td>
        <% end %>

        <!-- Boucle sur les jours du mois pour générer les cellules -->
        <% (Date.new(@year.to_i, @month.to_i, 1)..Date.new(@year.to_i, @month.to_i, -1)).each do |date| %>
          <% past_day_class = 'past-day' if date < Date.today %>
          <% is_reserved = @bookings.any? { |booking| booking.start_date <= date && booking.end_date >= date } %>
          <td class="<%= 'reserved' if is_reserved %> <%= past_day_class %>">
            <% if is_reserved %>
              <span class="reserved-date"><%= date.day %></span>
            <% else %>
              <% if date >= Date.today %>
                <button class="btn btn-success available-day" data-date="<%= date %>"><%= date.day %></button>
              <% else %>
                <span><%= date.day %></span>
              <% end %>
            <% end %>
          </td>
          <% if date.wday == 6 %> <!-- Fin de semaine, nouvelle ligne -->
            </tr><tr>
          <% end %>
        <% end %>

        <!-- Remplissage des cellules vides après le dernier jour du mois -->
        <% (6 - Date.new(@year.to_i, @month.to_i, -1).wday).times do %>
          <td></td>
        <% end %>
      </tr>
    </tbody>
  </table>

  <!-- Conteneur où le formulaire sera affiché en fonction de la sélection -->
  <div id="form-container" class="mt-4"></div>

  <!-- Bouton pour réinitialiser la durée et le calendrier -->
  <div class="mt-3">
    <button id="reset-button" class="btn btn-warning">Réinitialiser la durée</button>
  </div>
</div>

<script>
document.addEventListener("DOMContentLoaded", function() {
  const durationSelect = document.getElementById('duration-select');
  const availableDays = document.querySelectorAll('.available-day');
  const formContainer = document.getElementById('form-container');
  let selectedDate = null;

  // Fonction pour afficher un formulaire en fonction de la durée et de la date
  function displayForm(duration, date) {
    if (!duration || !date) return;

    // Afficher le formulaire pour la durée choisie
    fetch(`/get_form?duration=${duration}&date=${date}`, {
      method: 'GET',
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.text())
    .then(html => {
      formContainer.innerHTML = html;
    })
    .catch(error => console.error('Erreur:', error));
  }

  // Gérer le clic sur une date disponible
  availableDays.forEach(button => {
    button.addEventListener('click', function() {
      selectedDate = this.getAttribute('data-date');
      const selectedDuration = durationSelect.value;

      // Mettre à jour l'affichage du calendrier et marquer la date sélectionnée
      availableDays.forEach(btn => btn.classList.remove('btn-primary'));
      this.classList.add('btn-primary');

      // Mettre à jour le formulaire en fonction de la date et de la durée choisies
      displayForm(selectedDuration, selectedDate);
    });
  });

  // Gérer la modification du choix de la durée
  durationSelect.addEventListener('change', function() {
    const selectedDuration = durationSelect.value;
    if (selectedDate) {
      displayForm(selectedDuration, selectedDate);
    }
  });

  // Réinitialiser la sélection
  const resetButton = document.getElementById('reset-button');
  resetButton.addEventListener('click', function() {
    durationSelect.selectedIndex = 0;
    selectedDate = null;

    // Réinitialiser le formulaire
    formContainer.innerHTML = '';

    // Réinitialiser les boutons du calendrier
    availableDays.forEach(button => {
      button.classList.remove('btn-primary');
      button.classList.add('btn-success');
    });
  });
});
</script>
